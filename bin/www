#!/usr/bin/env node
require("dotenv").config();
const localtunnel = require("localtunnel");

/**
 * Module dependencies.
 */

var app = require("../app");
var debug = require("debug")("basicsetting:server");
var http = require("http");

/**
 * Get port from environment and store in Express.
 */

var PORT = normalizePort(process.env.PORT || "3000");
app.set("port", PORT);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(PORT, () => {
  console.log(`Server is running on port ${PORT}`);

  // LocalTunnel setup
  (async () => {
    const tunnel = await localtunnel({
      port: PORT,
      subdomain: process.env.SUB_DOMAIN,
    });
    console.log(`Public URL is: ${tunnel.url}`);
    tunnel.on("close", () => {
      console.log("Tunnel has been closed!");
    });
  })();
});
server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var PORT = parseInt(val, 10);

  if (isNaN(PORT)) {
    // named pipe
    return val;
  }

  if (PORT >= 0) {
    // port number
    return PORT;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof PORT === "string" ? "Pipe " + PORT : "Port " + PORT;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}
